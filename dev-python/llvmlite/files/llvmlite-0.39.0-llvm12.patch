From 1d928ebcd59b23b5050234a2bf71f9be7f5f6bd1 Mon Sep 17 00:00:00 2001
From: Richard Barnes <rbarnes@umn.edu>
Date: Wed, 1 Dec 2021 10:29:08 -0700
Subject: [PATCH] Enable LLVM-12 and LLVM-13

---
 ffi/build.py                   |  5 ++---
 ffi/targets.cpp                |  2 ++
 llvmlite/tests/test_binding.py | 19 ++++++++++++++++---
 3 files changed, 20 insertions(+), 6 deletions(-)

Index: llvmlite-0.39.0/ffi/build.py
===================================================================
--- llvmlite-0.39.0.orig/ffi/build.py
+++ llvmlite-0.39.0/ffi/build.py
@@ -163,9 +163,8 @@ def main_posix(kind, library_ext):
         print(msg)
         print(warning + '\n')
     else:
-
-        if not out.startswith('11'):
-            msg = ("Building llvmlite requires LLVM 11.x.x, got "
+        if not (out.startswith('11') or out.startswith('12') or out.startswith('13')):
+            msg = ("Building llvmlite requires LLVM 11-13.x.x, got "
                    "{!r}. Be sure to set LLVM_CONFIG to the right executable "
                    "path.\nRead the documentation at "
                    "http://llvmlite.pydata.org/ for more information about "
Index: llvmlite-0.39.0/ffi/targets.cpp
===================================================================
--- llvmlite-0.39.0.orig/ffi/targets.cpp
+++ llvmlite-0.39.0/ffi/targets.cpp
@@ -204,7 +204,9 @@ LLVMPY_CreateTargetMachine(LLVMTargetRef
         rm = Reloc::DynamicNoPIC;
 
     TargetOptions opt;
+#if LLVM_VERSION_MAJOR < 12
     opt.PrintMachineCode = PrintMC;
+#endif
     opt.MCOptions.ABIName = ABIName;
 
     bool jit = JIT;
Index: llvmlite-0.39.0/llvmlite/tests/test_binding.py
===================================================================
--- llvmlite-0.39.0.orig/llvmlite/tests/test_binding.py
+++ llvmlite-0.39.0/llvmlite/tests/test_binding.py
@@ -18,6 +18,16 @@ from llvmlite.binding import ffi
 from llvmlite.tests import TestCase
 
 
+def clean_string_whitespace(x: str) -> str:
+    # Remove trailing whitespace from the end of each line
+    x = re.sub(r"\s+$", "", x, flags=re.MULTILINE)
+    # Remove intermediate blank lines
+    x = re.sub(r"\n\s*\n", r"\n", x, flags=re.MULTILINE)
+    # Remove extraneous whitespace from the beginning and end of the string
+    x = x.strip()
+    return x
+
+
 # arvm7l needs extra ABI symbols to link successfully
 if platform.machine() == 'armv7l':
     llvm.load_library_permanently('libgcc_s.so.1')
@@ -555,7 +565,10 @@ class TestMisc(BaseTest):
         bd = ir.IRBuilder(fn.append_basic_block(name="<>!*''#"))
         bd.ret(ir.Constant(ir.IntType(32), 12345))
         asm = str(mod)
-        self.assertEqual(asm, asm_nonalphanum_blocklabel)
+        self.assertEqual(
+            clean_string_whitespace(asm),
+            clean_string_whitespace(asm_nonalphanum_blocklabel)
+        )
 
     def test_global_context(self):
         gcontext1 = llvm.context.get_global_context()
@@ -640,7 +653,7 @@ class TestMisc(BaseTest):
     def test_version(self):
         major, minor, patch = llvm.llvm_version_info
         # one of these can be valid
-        valid = [(11,)]
+        valid = [(11,), (12,), (13,)]
         self.assertIn((major,), valid)
         self.assertIn(patch, range(10))
 
Index: llvmlite-0.39.0/ffi/passmanagers.cpp
===================================================================
--- llvmlite-0.39.0.orig/ffi/passmanagers.cpp
+++ llvmlite-0.39.0/ffi/passmanagers.cpp
@@ -17,9 +17,6 @@
 #include "llvm-c/Transforms/IPO.h"
 #include "llvm-c/Transforms/Scalar.h"
 #include "llvm/IR/LegacyPassManager.h"
-#if LLVM_VERSION_MAJOR > 11
-#include "llvm/IR/RemarkStreamer.h"
-#endif
 #include "llvm/IR/LLVMRemarkStreamer.h"
 #include "llvm/Remarks/RemarkStreamer.h"
 #include "llvm/Transforms/IPO.h"
